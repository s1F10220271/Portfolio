{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true); // テーマ状態\n\n  const addTask = async (taskText, deadline) => {\n    const genre = await categorizeTask(taskText);\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre,\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    return true;\n  }).sort((a, b) => {\n    if (filter === \"deadline\") {\n      return new Date(a.deadline || \"9999-12-31\") - new Date(b.deadline || \"9999-12-31\");\n    }\n    return 0;\n  });\n\n  // テーマ切り替え\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ultimate TODO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"theme-toggle\",\n      onClick: toggleTheme,\n      children: isDarkMode ? \"ライトモード\" : \"ダークモード\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      setFilter: setFilter,\n      filter: filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: filteredTasks,\n      toggleTaskCompletion: toggleTaskCompletion,\n      deleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d/rr1qjLrOvgnj6rZFCmWhm9ds0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","categorizeTask","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","isDarkMode","setIsDarkMode","addTask","taskText","deadline","genre","newTask","id","Date","now","text","completed","toggleTaskCompletion","map","task","deleteTask","filteredTasks","sort","a","b","toggleTheme","document","body","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\";\nimport \"./App.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true); // テーマ状態\n\n  const addTask = async (taskText, deadline) => {\n    const genre = await categorizeTask(taskText);\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre,\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const filteredTasks = tasks\n    .filter((task) => {\n      if (filter === \"completed\") return task.completed;\n      if (filter === \"incomplete\") return !task.completed;\n      return true;\n    })\n    .sort((a, b) => {\n      if (filter === \"deadline\") {\n        return new Date(a.deadline || \"9999-12-31\") - new Date(b.deadline || \"9999-12-31\");\n      }\n      return 0;\n    });\n\n  // テーマ切り替え\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  return (\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <h1>Ultimate TODO</h1>\n      <button className=\"theme-toggle\" onClick={toggleTheme}>\n        {isDarkMode ? \"ライトモード\" : \"ダークモード\"}\n      </button>\n      <TaskInput addTask={addTask} />\n      <Tabs setFilter={setFilter} filter={filter} />\n      <TaskList\n        tasks={filteredTasks}\n        toggleTaskCompletion={toggleTaskCompletion}\n        deleteTask={deleteTask}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}