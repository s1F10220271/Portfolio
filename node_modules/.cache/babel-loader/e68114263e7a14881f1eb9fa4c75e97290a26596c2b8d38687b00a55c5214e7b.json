{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\";\nimport Calendar from \"react-calendar\";\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"課題\", \"テスト勉強\", \"バイト\", \"就活\"]);\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [calendarFilterDate, setCalendarFilterDate] = useState(null);\n\n  // 新しいジャンルを追加\n  const addGenre = newGenre => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // タスクの完了・未完了を切り替える\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n\n  // タスクを削除\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  // テーマの切り替え\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  // タスクのフィルタリング\n  const filteredTasks = tasks.filter(task => {\n    if (calendarFilterDate) return task.deadline === calendarFilterDate;\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          onClickDay: date => {\n            const clickedDate = date.toISOString().split(\"T\")[0];\n            if (calendarFilterDate === clickedDate) {\n              setCalendarFilterDate(null); // 2回クリックでフィルター解除\n            } else {\n              setCalendarFilterDate(clickedDate); // 1回目でフィルター適用\n            }\n          },\n          tileContent: ({\n            date\n          }) => {\n            const hasTask = tasks.some(task => task.deadline === date.toISOString().split(\"T\")[0]);\n            return hasTask ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 32\n            }, this) : null;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Ultimate TODO\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"theme-toggle\",\n            onClick: toggleTheme,\n            children: isDarkMode ? \"☀️\" : \"🌙\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n          addTask: addTask,\n          addGenre: addGenre,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          setFilter: setFilter,\n          setSelectedGenre: setSelectedGenre,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: calendarFilterDate ? `${calendarFilterDate} のタスク` : \"全てのタスク\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: filteredTasks,\n          toggleTaskCompletion: toggleTaskCompletion,\n          deleteTask: deleteTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g44pzvR1fBvzqqb0mo9qA212nN4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","categorizeTask","Calendar","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","genres","setGenres","selectedGenre","setSelectedGenre","isDarkMode","setIsDarkMode","calendarFilterDate","setCalendarFilterDate","addGenre","newGenre","includes","addTask","taskText","deadline","dynamicGenres","join","genre","newTask","id","Date","now","text","completed","toggleTaskCompletion","map","task","deleteTask","toggleTheme","document","body","className","filteredTasks","children","onClickDay","date","clickedDate","toISOString","split","tileContent","hasTask","some","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\";\nimport Calendar from \"react-calendar\";\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\n    \"課題\",\n    \"テスト勉強\",\n    \"バイト\",\n    \"就活\",\n  ]);\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [calendarFilterDate, setCalendarFilterDate] = useState(null);\n\n  // 新しいジャンルを追加\n  const addGenre = (newGenre) => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // タスクの完了・未完了を切り替える\n  const toggleTaskCompletion = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  // タスクを削除\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  // テーマの切り替え\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  // タスクのフィルタリング\n  const filteredTasks = tasks.filter((task) => {\n    if (calendarFilterDate) return task.deadline === calendarFilterDate;\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n\n  return (\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <div className=\"main-content\">\n        {/* カレンダー */}\n        <div className=\"calendar-container\">\n          <Calendar\n            onClickDay={(date) => {\n              const clickedDate = date.toISOString().split(\"T\")[0];\n              if (calendarFilterDate === clickedDate) {\n                setCalendarFilterDate(null); // 2回クリックでフィルター解除\n              } else {\n                setCalendarFilterDate(clickedDate); // 1回目でフィルター適用\n              }\n            }}\n            tileContent={({ date }) => {\n              const hasTask = tasks.some(\n                (task) => task.deadline === date.toISOString().split(\"T\")[0]\n              );\n              return hasTask ? <div className=\"calendar-dot\"></div> : null;\n            }}\n          />\n        </div>\n\n        {/* タスク管理UI */}\n        <div className=\"app-container\">\n          <div className=\"header\">\n            <h1>Ultimate TODO</h1>\n            <button className=\"theme-toggle\" onClick={toggleTheme}>\n              {isDarkMode ? \"☀️\" : \"🌙\"}\n            </button>\n          </div>\n          <TaskInput addTask={addTask} addGenre={addGenre} genres={genres} />\n          <Tabs setFilter={setFilter} setSelectedGenre={setSelectedGenre} genres={genres} />\n          <h2>\n            {calendarFilterDate\n              ? `${calendarFilterDate} のタスク`\n              : \"全てのタスク\"}\n          </h2>\n          <TaskList\n            tasks={filteredTasks}\n            toggleTaskCompletion={toggleTaskCompletion}\n            deleteTask={deleteTask}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}