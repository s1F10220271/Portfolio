{"ast":null,"code":"import OpenAI from \"openai\";\nconst openai = new OpenAI({\n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true // ブラウザ環境でAPIを使用する場合はこれが必要\n});\nexport const categorizeTask = async task => {\n  const prompt = `以下のタスクをジャンル分けしてください：\\n\\nタスク: ${task}\\n\\nジャンル候補: 勉強, 買い物, 遊び, その他\\n\\n答え:`;\n  try {\n    var _response$choices$, _response$choices$$me;\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        role: \"system\",\n        content: \"タスクをジャンル分けします。\"\n      }, {\n        role: \"user\",\n        content: prompt\n      }],\n      max_tokens: 10\n    });\n    return ((_response$choices$ = response.choices[0]) === null || _response$choices$ === void 0 ? void 0 : (_response$choices$$me = _response$choices$.message) === null || _response$choices$$me === void 0 ? void 0 : _response$choices$$me.content.trim()) || \"その他\";\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    return \"その他\";\n  }\n};","map":{"version":3,"names":["OpenAI","openai","apiKey","dangerouslyAllowBrowser","categorizeTask","task","prompt","_response$choices$","_response$choices$$me","response","chat","completions","create","model","messages","role","content","max_tokens","choices","message","trim","error","console"],"sources":["/home/iniad/F/chatgpt-clone/src/utils/genreCategorizer.js"],"sourcesContent":["import OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true, // ブラウザ環境でAPIを使用する場合はこれが必要\n});\n\nexport const categorizeTask = async (task) => {\n  const prompt = `以下のタスクをジャンル分けしてください：\\n\\nタスク: ${task}\\n\\nジャンル候補: 勉強, 買い物, 遊び, その他\\n\\n答え:`;\n\n  try {\n    const response = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        { role: \"system\", content: \"タスクをジャンル分けします。\" },\n        { role: \"user\", content: prompt },\n      ],\n      max_tokens: 10,\n    });\n    return response.choices[0]?.message?.content.trim() || \"その他\";\n  } catch (error) {\n    console.error(\"OpenAI API Error:\", error);\n    return \"その他\";\n  }\n};"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,MAAMC,MAAM,GAAG,IAAID,MAAM,CAAC;EACxBE,MAAM,EAAE,sKAAsK;EAC9KC,uBAAuB,EAAE,IAAI,CAAE;AACjC,CAAC,CAAC;AAEF,OAAO,MAAMC,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5C,MAAMC,MAAM,GAAG,gCAAgCD,IAAI,qCAAqC;EAExF,IAAI;IAAA,IAAAE,kBAAA,EAAAC,qBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMR,MAAM,CAACS,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACpDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CACR;QAAEC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAiB,CAAC,EAC7C;QAAED,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEV;MAAO,CAAC,CAClC;MACDW,UAAU,EAAE;IACd,CAAC,CAAC;IACF,OAAO,EAAAV,kBAAA,GAAAE,QAAQ,CAACS,OAAO,CAAC,CAAC,CAAC,cAAAX,kBAAA,wBAAAC,qBAAA,GAAnBD,kBAAA,CAAqBY,OAAO,cAAAX,qBAAA,uBAA5BA,qBAAA,CAA8BQ,OAAO,CAACI,IAAI,CAAC,CAAC,KAAI,KAAK;EAC9D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}