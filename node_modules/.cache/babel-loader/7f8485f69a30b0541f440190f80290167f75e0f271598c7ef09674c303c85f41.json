{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"勉強\", \"買い物\", \"遊び\"]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\"); // ジャンルフィルタ\n\n  const addTask = (taskText, deadline, genre) => {\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n  const addGenre = newGenre => {\n    if (newGenre && !genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  // タスクのフィルタリング\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ultimate TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      addTask: addTask,\n      genres: genres,\n      addGenre: addGenre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      setFilter: setFilter,\n      setSelectedGenre: setSelectedGenre,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: filteredTasks,\n      toggleTaskCompletion: toggleTaskCompletion,\n      deleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WURZ/UioXOTFQR65EXSlWS2mIpk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","genres","setGenres","selectedGenre","setSelectedGenre","addTask","taskText","deadline","genre","newTask","id","Date","now","text","completed","addGenre","newGenre","includes","toggleTaskCompletion","map","task","deleteTask","filteredTasks","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport \"./App.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"勉強\", \"買い物\", \"遊び\"]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\"); // ジャンルフィルタ\n\n  const addTask = (taskText, deadline, genre) => {\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const addGenre = (newGenre) => {\n    if (newGenre && !genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks(tasks.map((task) =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ));\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  // タスクのフィルタリング\n  const filteredTasks = tasks.filter((task) => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>Ultimate TODO</h1>\n      </div>\n      <TaskInput addTask={addTask} genres={genres} addGenre={addGenre} />\n      <Tabs setFilter={setFilter} setSelectedGenre={setSelectedGenre} genres={genres} />\n      <TaskList tasks={filteredTasks} toggleTaskCompletion={toggleTaskCompletion} deleteTask={deleteTask} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}