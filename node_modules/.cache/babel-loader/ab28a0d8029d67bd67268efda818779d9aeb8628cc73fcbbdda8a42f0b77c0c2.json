{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport Calendar from \"react-calendar\"; // react-calendar ライブラリ\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\"; // カレンダーのスタイル\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"授業\", \"課題\", \"テスト勉強\", \"アルバイト\", \"買い物\", \"友人\", \"就活\", \"趣味\"]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [selectedDate, setSelectedDate] = useState(new Date()); // 選択した日付\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]); // 新しいジャンルを追加\n    }\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // 新しいジャンルを手動で追加\n  const addGenre = newGenre => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n\n  // カレンダーの日付に関連するタスクを取得\n  const filteredTasksByDate = tasks.filter(task => task.deadline === selectedDate.toISOString().split(\"T\")[0]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ultimate TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-toggle\",\n        onClick: toggleTheme,\n        children: isDarkMode ? \"☀️\" : \"🌙\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      addTask: addTask,\n      addGenre: addGenre,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      setFilter: setFilter,\n      setSelectedGenre: setSelectedGenre,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30AB\\u30EC\\u30F3\\u30C0\\u30FC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n      onChange: date => setSelectedDate(date),\n      value: selectedDate,\n      tileContent: ({\n        date\n      }) => {\n        // カレンダーの日付にタスクがあればドットを表示\n        const hasTask = tasks.some(task => task.deadline === date.toISOString().split(\"T\")[0]);\n        return hasTask ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"calendar-dot\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 28\n        }, this) : null;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [selectedDate.toDateString(), \" \\u306E\\u30BF\\u30B9\\u30AF\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: filteredTasksByDate,\n      toggleTaskCompletion: toggleTaskCompletion,\n      deleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"JoyenXb34bmUwTWZIgSHPgERGQE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","categorizeTask","Calendar","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","genres","setGenres","selectedGenre","setSelectedGenre","isDarkMode","setIsDarkMode","selectedDate","setSelectedDate","Date","addTask","taskText","deadline","dynamicGenres","join","genre","includes","newTask","id","now","text","completed","addGenre","newGenre","toggleTaskCompletion","map","task","deleteTask","toggleTheme","document","body","className","filteredTasks","filteredTasksByDate","toISOString","split","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","date","value","tileContent","hasTask","some","toDateString","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport Calendar from \"react-calendar\"; // react-calendar ライブラリ\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\"; // カレンダーのスタイル\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\n    \"授業\",\n    \"課題\",\n    \"テスト勉強\",\n    \"アルバイト\",\n    \"買い物\",\n    \"友人\",\n    \"就活\",\n    \"趣味\",\n  ]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [selectedDate, setSelectedDate] = useState(new Date()); // 選択した日付\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]); // 新しいジャンルを追加\n    }\n\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // 新しいジャンルを手動で追加\n  const addGenre = (newGenre) => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, completed: !task.completed } : task\n      )\n    );\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  const filteredTasks = tasks.filter((task) => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n\n  // カレンダーの日付に関連するタスクを取得\n  const filteredTasksByDate = tasks.filter(\n    (task) => task.deadline === selectedDate.toISOString().split(\"T\")[0]\n  );\n\n  return (\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <div className=\"header\">\n        <h1>Ultimate TODO</h1>\n        <button className=\"theme-toggle\" onClick={toggleTheme}>\n          {isDarkMode ? \"☀️\" : \"🌙\"}\n        </button>\n      </div>\n\n      {/* タスク入力 */}\n      <TaskInput addTask={addTask} addGenre={addGenre} genres={genres} />\n\n      {/* タブフィルター */}\n      <Tabs\n        setFilter={setFilter}\n        setSelectedGenre={setSelectedGenre}\n        genres={genres}\n      />\n\n      {/* カレンダー */}\n      <h2>カレンダー</h2>\n      <Calendar\n        onChange={(date) => setSelectedDate(date)}\n        value={selectedDate}\n        tileContent={({ date }) => {\n          // カレンダーの日付にタスクがあればドットを表示\n          const hasTask = tasks.some(\n            (task) => task.deadline === date.toISOString().split(\"T\")[0]\n          );\n          return hasTask ? <div className=\"calendar-dot\"></div> : null;\n        }}\n      />\n\n      {/* 選択した日付のタスク一覧 */}\n      <h2>{selectedDate.toDateString()} のタスク</h2>\n      <TaskList\n        tasks={filteredTasksByDate}\n        toggleTaskCompletion={toggleTaskCompletion}\n        deleteTask={deleteTask}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}