{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport Calendar from \"react-calendar\"; // カレンダーライブラリ\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"授業\", \"課題\", \"テスト勉強\", \"アルバイト\", \"買い物\", \"友人\", \"就活\", \"趣味\"]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [selectedDate, setSelectedDate] = useState(null); // 選択された日付（初期は null）\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  // カレンダーでフィルタリング（クリックした日付のタスク）\n  const filteredTasks = tasks.filter(task => {\n    if (selectedDate) {\n      return task.deadline === selectedDate.toISOString().split(\"T\")[0];\n    }\n    return true; // 選択されていない場合は全タスク表示\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ultimate TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-toggle\",\n        onClick: toggleTheme,\n        children: isDarkMode ? \"☀️\" : \"🌙\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\u30AB\\u30EC\\u30F3\\u30C0\\u30FC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n          onChange: date => setSelectedDate(date),\n          value: selectedDate,\n          tileContent: ({\n            date\n          }) => {\n            const hasTask = tasks.some(task => task.deadline === date.toISOString().split(\"T\")[0]);\n            return hasTask ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-dot\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 32\n            }, this) : null;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-container\",\n        children: [/*#__PURE__*/_jsxDEV(TaskInput, {\n          addTask: addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n          setFilter: setFilter,\n          setSelectedGenre: setSelectedGenre,\n          genres: genres\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedDate ? `${selectedDate.toDateString()} のタスク` : \"全てのタスク\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n          tasks: filteredTasks,\n          toggleTaskCompletion: toggleTaskCompletion,\n          deleteTask: deleteTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z7uAg+x/MmHcKQWo0fBRvL1Er74=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","categorizeTask","Calendar","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","genres","setGenres","selectedGenre","setSelectedGenre","isDarkMode","setIsDarkMode","selectedDate","setSelectedDate","addTask","taskText","deadline","dynamicGenres","join","genre","includes","newTask","id","Date","now","text","completed","toggleTaskCompletion","map","task","deleteTask","toggleTheme","document","body","className","filteredTasks","toISOString","split","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onChange","date","value","tileContent","hasTask","some","toDateString","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport Calendar from \"react-calendar\"; // カレンダーライブラリ\nimport \"./App.css\";\nimport \"react-calendar/dist/Calendar.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\n    \"授業\",\n    \"課題\",\n    \"テスト勉強\",\n    \"アルバイト\",\n    \"買い物\",\n    \"友人\",\n    \"就活\",\n    \"趣味\",\n  ]); // 初期ジャンル\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n  const [selectedDate, setSelectedDate] = useState(null); // 選択された日付（初期は null）\n\n  // 新しいタスクを追加\n  const addTask = async (taskText, deadline) => {\n    const dynamicGenres = genres.join(\"、\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]);\n    }\n\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"その他\",\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks(tasks.map((task) =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ));\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  // カレンダーでフィルタリング（クリックした日付のタスク）\n  const filteredTasks = tasks.filter((task) => {\n    if (selectedDate) {\n      return task.deadline === selectedDate.toISOString().split(\"T\")[0];\n    }\n    return true; // 選択されていない場合は全タスク表示\n  });\n\n  return (\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <div className=\"header\">\n        <h1>Ultimate TODO</h1>\n        <button className=\"theme-toggle\" onClick={toggleTheme}>\n          {isDarkMode ? \"☀️\" : \"🌙\"}\n        </button>\n      </div>\n\n      <div className=\"main-content\">\n        {/* カレンダー（左側） */}\n        <div className=\"calendar-container\">\n          <h2>カレンダー</h2>\n          <Calendar\n            onChange={(date) => setSelectedDate(date)}\n            value={selectedDate}\n            tileContent={({ date }) => {\n              const hasTask = tasks.some(\n                (task) => task.deadline === date.toISOString().split(\"T\")[0]\n              );\n              return hasTask ? <div className=\"calendar-dot\"></div> : null;\n            }}\n          />\n        </div>\n\n        {/* タスク管理（右側） */}\n        <div className=\"task-container\">\n          <TaskInput addTask={addTask} />\n          <Tabs setFilter={setFilter} setSelectedGenre={setSelectedGenre} genres={genres} />\n          <h2>\n            {selectedDate\n              ? `${selectedDate.toDateString()} のタスク`\n              : \"全てのタスク\"}\n          </h2>\n          <TaskList\n            tasks={filteredTasks}\n            toggleTaskCompletion={toggleTaskCompletion}\n            deleteTask={deleteTask}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}