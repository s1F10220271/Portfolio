{"ast":null,"code":"var _jsxFileName = \"/home/iniad/F/chatgpt-clone/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\"ÊéàÊ•≠\", \"„É¨„Éù„Éº„Éà\", \"„ÉÜ„Çπ„ÉàÂãâÂº∑\", \"„Ç¢„É´„Éê„Ç§„Éà\", \"Ë≤∑„ÅÑÁâ©\", \"ÂÅ•Â∫∑ÁÆ°ÁêÜ\", \"„Çµ„Éº„ÇØ„É´Ê¥ªÂãï\", \"Âèã‰∫∫„ÉªÈ£≤„Åø‰ºö\", \"Â±•Ê≠¥Êõ∏‰ΩúÊàê\", \"Ë∂£Âë≥Ê¥ªÂãï\"]); // ÂàùÊúü„Ç∏„É£„É≥„É´\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  // Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†\n  const addTask = async (taskText, deadline) => {\n    // ÁèæÂú®„ÅÆ„Ç∏„É£„É≥„É´„É™„Çπ„Éà„ÇíGPT„ÅÆ„Éó„É≠„É≥„Éó„Éà„Å´Âê´„ÇÅ„Çã\n    const dynamicGenres = genres.join(\"„ÄÅ\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]); // Êñ∞„Åó„ÅÑ„Ç∏„É£„É≥„É´„ÇíËøΩÂä†\n    }\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"„Åù„ÅÆ‰ªñ\",\n      deadline,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Êñ∞„Åó„ÅÑ„Ç∏„É£„É≥„É´„ÇíÊâãÂãï„ÅßËøΩÂä†\n  const addGenre = newGenre => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n  const toggleTaskCompletion = id => {\n    setTasks(tasks.map(task => task.id === id ? {\n      ...task,\n      completed: !task.completed\n    } : task));\n  };\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ultimate TODO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"theme-toggle\",\n        onClick: toggleTheme,\n        children: isDarkMode ? \"‚òÄÔ∏è\" : \"üåô\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskInput, {\n      addTask: addTask,\n      addGenre: addGenre,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tabs, {\n      setFilter: setFilter,\n      setSelectedGenre: setSelectedGenre,\n      genres: genres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: filteredTasks,\n      toggleTaskCompletion: toggleTaskCompletion,\n      deleteTask: deleteTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CTkrOvTm4vlIDyMbuv009fz0WtQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TaskInput","TaskList","Tabs","categorizeTask","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","filter","setFilter","genres","setGenres","selectedGenre","setSelectedGenre","isDarkMode","setIsDarkMode","addTask","taskText","deadline","dynamicGenres","join","genre","includes","newTask","id","Date","now","text","completed","addGenre","newGenre","toggleTaskCompletion","map","task","deleteTask","toggleTheme","document","body","className","filteredTasks","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/home/iniad/F/chatgpt-clone/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport TaskInput from \"./components/TaskInput\";\nimport TaskList from \"./components/TaskList\";\nimport Tabs from \"./components/Tabs\";\nimport { categorizeTask } from \"./utils/genreCategorizer\"; // GPT API\nimport \"./App.css\";\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState(\"all\");\n  const [genres, setGenres] = useState([\n    \"ÊéàÊ•≠\",\n    \"„É¨„Éù„Éº„Éà\",\n    \"„ÉÜ„Çπ„ÉàÂãâÂº∑\",\n    \"„Ç¢„É´„Éê„Ç§„Éà\",\n    \"Ë≤∑„ÅÑÁâ©\",\n    \"ÂÅ•Â∫∑ÁÆ°ÁêÜ\",\n    \"„Çµ„Éº„ÇØ„É´Ê¥ªÂãï\",\n    \"Âèã‰∫∫„ÉªÈ£≤„Åø‰ºö\",\n    \"Â±•Ê≠¥Êõ∏‰ΩúÊàê\",\n    \"Ë∂£Âë≥Ê¥ªÂãï\"\n  ]); // ÂàùÊúü„Ç∏„É£„É≥„É´\n  const [selectedGenre, setSelectedGenre] = useState(\"all\");\n  const [isDarkMode, setIsDarkMode] = useState(true);\n\n  // Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíËøΩÂä†\n  const addTask = async (taskText, deadline) => {\n    // ÁèæÂú®„ÅÆ„Ç∏„É£„É≥„É´„É™„Çπ„Éà„ÇíGPT„ÅÆ„Éó„É≠„É≥„Éó„Éà„Å´Âê´„ÇÅ„Çã\n    const dynamicGenres = genres.join(\"„ÄÅ\");\n    const genre = await categorizeTask(taskText, dynamicGenres);\n\n    if (!genres.includes(genre)) {\n      setGenres([...genres, genre]); // Êñ∞„Åó„ÅÑ„Ç∏„É£„É≥„É´„ÇíËøΩÂä†\n    }\n\n    const newTask = {\n      id: Date.now(),\n      text: taskText,\n      genre: genre || \"„Åù„ÅÆ‰ªñ\",\n      deadline,\n      completed: false,\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  // Êñ∞„Åó„ÅÑ„Ç∏„É£„É≥„É´„ÇíÊâãÂãï„ÅßËøΩÂä†\n  const addGenre = (newGenre) => {\n    if (!genres.includes(newGenre)) {\n      setGenres([...genres, newGenre]);\n    }\n  };\n\n  const toggleTaskCompletion = (id) => {\n    setTasks(tasks.map((task) =>\n      task.id === id ? { ...task, completed: !task.completed } : task\n    ));\n  };\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  const toggleTheme = () => {\n    setIsDarkMode(!isDarkMode);\n    document.body.className = isDarkMode ? \"light-mode\" : \"dark-mode\";\n  };\n\n  const filteredTasks = tasks.filter((task) => {\n    if (filter === \"completed\") return task.completed;\n    if (filter === \"incomplete\") return !task.completed;\n    if (selectedGenre !== \"all\") return task.genre === selectedGenre;\n    return true;\n  });\n\n  return (\n    <div className={`app ${isDarkMode ? \"dark-mode\" : \"light-mode\"}`}>\n      <div className=\"header\">\n        <h1>Ultimate TODO</h1>\n        <button className=\"theme-toggle\" onClick={toggleTheme}>\n          {isDarkMode ? \"‚òÄÔ∏è\" : \"üåô\"}\n        </button>\n      </div>\n      <TaskInput addTask={addTask} addGenre={addGenre} genres={genres} />\n      <Tabs setFilter={setFilter} setSelectedGenre={setSelectedGenre} genres={genres} />\n      <TaskList tasks={filteredTasks} toggleTaskCompletion={toggleTaskCompletion} deleteTask={deleteTask} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}